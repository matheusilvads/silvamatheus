package com.qi.finalproject.composables

import android.graphics.Paint.Align
import androidx.annotation.DrawableRes
import androidx.annotation.StringRes
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.qi.finalproject.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MyCard(
    modifier: Modifier = Modifier,
    @DrawableRes image: Int,
    @StringRes text: Int,
    checked: Boolean,
    onChecked: (Boolean) -> Unit
) {
    Card(
        modifier = modifier.padding(5.dp),
        content = {
            Column(modifier = modifier.padding(5.dp)) {
                Image(
                    painter = painterResource(id = image),
                    contentDescription = null,
                    contentScale = ContentScale.FillWidth,
                    modifier = modifier.fillMaxWidth()
                )
                Divider(
                    thickness = 1.dp,
                    modifier = modifier.padding(10.dp)
                )
                Row(
                    modifier = modifier
                        .fillMaxWidth()
                        .padding(horizontal = 10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(text = stringResource(id = text))
                    Switch(
                        checked = checked,
                        onCheckedChange = onChecked
                    )
                }
            }
        }
    )
}


@Composable
fun MyCardState(
    modifier: Modifier = Modifier,
    @DrawableRes image: Int = R.drawable.ic_launcher_background,
    @StringRes text: Int = R.string.app_name
) {
    var check by rememberSaveable {
        mutableStateOf(false)
    }

    MyCard(
        image = image,
        text = text,
        checked = check,
        onChecked = { x -> check = x }
    )
}

/////////////////////////////
@Preview
@Composable
fun CardPreview() {
    MyCardState()
}
